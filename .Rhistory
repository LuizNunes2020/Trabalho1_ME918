if (config$modelo == 'reg_linear') {
plot(x = fit$fitted.values, y = fit$model[[1]],
xlab = 'Preditos', ylab = 'Observados')
abline(v=predicao_val, lty = 8, col = rgb(0, 0, 0, alpha = 0.5))
} else if (config$modelo == 'reg_logistica') {
plot(x = fit$fitted.values, y = fit$model[[1]],
xlab = 'Preditos', ylab = 'Observados')
abline(v=predicao_val, lty = 8, col = rgb(0, 0, 0, alpha = 0.5))
}
db <- read.csv(glue('entradas/{config$tabela}'), stringsAsFactors = T)  # lendo banco de dados
# pacotes utilizados
library(glue)
require(yaml)
require(jsonlite)
require(nnet)
# lendo configuracoes
config <- read_yaml('configuracao.yaml')  # lendo configuracoes
# verificações
if (!(config$reutilizar_modelo %in% c('sim', 'nao', 'não'))) {
stop('Especificacoes incorretas em reutilizar_modelo.')
}
# executando
if (config$reutilizar_modelo %in% c('não', 'nao')) source('treinamento.R')
source('predicao.R')
source('grafico.R')
# a predição é feita APENAS para o modelo especificado em
# config$escolhe_modelo. Se o modelo não for especificado, ele
# faz a predição para o primeiro ajustado
if (is.null(config$escolhe_modelo)) {
config$escolhe_modelo <- 'fit1'
}
fit <- readRDS(glue('saidas/{config$escolhe_modelo}.rds'))  # lendo modelo
db <- read.csv(glue('entradas/{config$tabela}'), stringsAsFactors = T)  # lendo banco de dados
db <- read.csv(glue('entradas/{config$tabela}'), stringsAsFactors = T)  # lendo banco de dados
# pacotes utilizados
library(glue)
require(yaml)
require(jsonlite)
require(nnet)
# lendo configuracoes
config <- read_yaml('configuracao.yaml')  # lendo configuracoes
# verificações
if (!(config$reutilizar_modelo %in% c('sim', 'nao', 'não'))) {
stop('Especificacoes incorretas em reutilizar_modelo.')
}
# executando
if (config$reutilizar_modelo %in% c('não', 'nao')) source('treinamento.R')
source('predicao.R')
source('grafico.R')
# a predição é feita APENAS para o modelo especificado em
# config$escolhe_modelo. Se o modelo não for especificado, ele
# faz a predição para o primeiro ajustado
if (is.null(config$escolhe_modelo)) {
config$escolhe_modelo <- 'fit1'
}
fit <- readRDS(glue('saidas/{config$escolhe_modelo}.rds'))  # lendo modelo
db <- read.csv(glue('entradas/{config$tabela}'), stringsAsFactors = T)  # lendo banco de dados
db <- read.csv(glue('entradas/{config$tabela}'), stringsAsFactors = T)  # lendo banco de dados
getwd()
db <- read.csv(glue('entradas/{config$tabela}'), stringsAsFactors = T)  # lendo banco de dados
for (i in 1:length(config$pares)) {
formulas <- reformulate(paste(config$pares[[i]]$x, collapse = ' + '),
response = config$pares[[i]]$y)
if (config$modelo == 'reg_linear') {
# regressao linear
fit <- lm(formulas, data = db)
} else if (config$modelo == 'reg_logistica') {
# regressao logistica
fit <- glm(formulas, data = db, family=binomial)
} else {
stop('Especificações de modelo incorretas, usar
reg_linear ou reg_logistica.')
}
saveRDS(fit, file = glue('saidas/fit{i}.rds'))  # salvando modelo
}
#https://www.geo.fu-berlin.de/en/v/soga-r/Basics-of-statistics/Logistic-Regression/Logistic-Regression-in-R---An-Example/index.html
# a predição é feita APENAS para o modelo especificado em
# config$escolhe_modelo. Se o modelo não for especificado, ele
# faz a predição para o primeiro ajustado
if (is.null(config$escolhe_modelo)) {
config$escolhe_modelo <- 'fit1'
}
fit <- readRDS(glue('saidas/{config$escolhe_modelo}.rds'))  # lendo modelo
preditores <- fromJSON('entradas/preditores.json')          # lendo json
db <- read.csv(glue('entradas/{config$tabela}'), stringsAsFactors = T)  # lendo banco de dados
if (is.null(config$escolhe_modelo)) {
config$escolhe_modelo <- 'fit1'
}
fit <- readRDS(glue('saidas/{config$escolhe_modelo}.rds'))  # lendo modelo
if (config$modelo == 'reg_linear') {
plot(x = fit$fitted.values, y = fit$model[[1]],
xlab = 'Preditos', ylab = 'Observados')
abline(v=predicao_val, lty = 8, col = rgb(0, 0, 0, alpha = 0.5))
} else if (config$modelo == 'reg_logistica') {
plot(x = fit$fitted.values, y = fit$model[[1]],
xlab = 'Preditos', ylab = 'Observados')
abline(v=predicao_val, lty = 8, col = rgb(0, 0, 0, alpha = 0.5))
}
# a predição é feita APENAS para o modelo especificado em
# config$escolhe_modelo. Se o modelo não for especificado, ele
# faz a predição para o primeiro ajustado
if (is.null(config$escolhe_modelo)) {
config$escolhe_modelo <- 'fit1'
}
fit <- readRDS(glue('saidas/{config$escolhe_modelo}.rds'))  # lendo modelo
preditores <- fromJSON('entradas/preditores.json')          # lendo json
# a predição é feita APENAS para o modelo especificado em
# config$escolhe_modelo. Se o modelo não for especificado, ele
# faz a predição para o primeiro ajustado
if (is.null(config$escolhe_modelo)) {
config$escolhe_modelo <- 'fit1'
}
fit <- readRDS(glue('saidas/{config$escolhe_modelo}.rds'))  # lendo modelo
preditores <- fromJSON('entradas/preditores.json')          # lendo json
predicao_val <- predict(fit, newdata = preditores, type='response')
write(toJSON(predicao_val), file = glue('saidas/{config$escolhe_modelo}_predicao.json'))
db <- read.csv(glue('entradas/{config$tabela}'), stringsAsFactors = T)  # lendo banco de dados
for (i in 1:length(config$pares)) {
formulas <- reformulate(paste(config$pares[[i]]$x, collapse = ' + '),
response = config$pares[[i]]$y)
if (config$modelo == 'reg_linear') {
# regressao linear
fit <- lm(formulas, data = db)
} else if (config$modelo == 'reg_logistica') {
# regressao logistica
fit <- glm(formulas, data = db, family=binomial)
} else {
stop('Especificações de modelo incorretas, usar
reg_linear ou reg_logistica.')
}
saveRDS(fit, file = glue('saidas/fit{i}.rds'))  # salvando modelo
}
#https://www.geo.fu-berlin.de/en/v/soga-r/Basics-of-statistics/Logistic-Regression/Logistic-Regression-in-R---An-Example/index.html
# pacotes utilizados
library(glue)
require(yaml)
require(jsonlite)
require(nnet)
# lendo configuracoes
config <- read_yaml('configuracao.yaml')  # lendo configuracoes
# verificações
if (!(config$reutilizar_modelo %in% c('sim', 'nao', 'não'))) {
stop('Especificacoes incorretas em reutilizar_modelo.')
}
# executando
if (config$reutilizar_modelo %in% c('não', 'nao')) source('treinamento.R')
source('predicao.R')
source('grafico.R')
db <- read.csv(glue('entradas/{config$tabela}'), stringsAsFactors = T)  # lendo banco de dados
if (is.null(config$escolhe_modelo)) {
config$escolhe_modelo <- 'fit1'
}
fit <- readRDS(glue('saidas/{config$escolhe_modelo}.rds'))  # lendo modelo
if (config$modelo == 'reg_linear') {
plot(x = fit$fitted.values, y = fit$model[[1]],
xlab = 'Preditos', ylab = 'Observados')
abline(v=predicao_val, lty = 8, col = rgb(0, 0, 0, alpha = 0.5))
} else if (config$modelo == 'reg_logistica') {
plot(x = fit$fitted.values, y = fit$model[[1]],
xlab = 'Preditos', ylab = 'Observados')
abline(v=predicao_val, lty = 8, col = rgb(0, 0, 0, alpha = 0.5))
}
lines(seq(0, 1, 0.01), predict(fit, data=seq(0, 1, 0.01), type='response'))
if (!file.exists(glue('saidas/{config$escolhe_modelo}.rds'))) {
stop("O modelo especificado não foi encontrado.")
}
if (!file.exists('entradas/preditores.json')) {
stop("Arquivo de preditores não encontrado.")
}
# a predição é feita APENAS para o modelo especificado em
# config$escolhe_modelo. Se o modelo não for especificado, ele
# faz a predição para o primeiro ajustado
if (is.null(config$escolhe_modelo)) {
config$escolhe_modelo <- 'fit1'
}
if (!file.exists(glue('saidas/{config$escolhe_modelo}.rds'))) {
stop("O modelo especificado não foi encontrado.")
}
if (!file.exists('entradas/preditores.json')) {
stop("Arquivo de preditores não encontrado.")
}
fit <- readRDS(glue('saidas/{config$escolhe_modelo}.rds'))  # lendo modelo
preditores <- fromJSON('entradas/preditores.json')          # lendo json
predicao_val <- predict(fit, newdata = preditores, type='response')
write(toJSON(predicao_val), file = glue('saidas/{config$escolhe_modelo}_predicao.json'))
message("Predições geradas e salvas com sucesso em: ", glue('saidas/{config$escolhe_modelo}_predicao.json'))
# a predição é feita APENAS para o modelo especificado em
# config$escolhe_modelo. Se o modelo não for especificado, ele
# faz a predição para o primeiro ajustado
if (is.null(config$escolhe_modelo)) {
config$escolhe_modelo <- 'fit1'
}
if (!file.exists(glue('saidas/{config$escolhe_modelo}.rds'))) {
stop("O modelo especificado não foi encontrado.")
}
if (!file.exists('entradas/preditores.json')) {
stop("Arquivo de preditores não encontrado.")
}
fit <- readRDS(glue('saidas/{config$escolhe_modelo}.rds'))  # lendo modelo
preditores <- fromJSON('entradas/preditores.json')          # lendo json
# a predição é feita APENAS para o modelo especificado em
# config$escolhe_modelo. Se o modelo não for especificado, ele
# faz a predição para o primeiro ajustado
if (is.null(config$escolhe_modelo)) {
config$escolhe_modelo <- 'fit1'
}
if (!file.exists(glue('saidas/{config$escolhe_modelo}.rds'))) {
stop("O modelo especificado não foi encontrado.")
}
if (!file.exists('entradas/preditores.json')) {
stop("Arquivo de preditores não encontrado.")
}
fit <- readRDS(glue('saidas/{config$escolhe_modelo}.rds'))  # lendo modelo
preditores <- fromJSON('entradas/preditores.json')          # lendo json
# a predição é feita APENAS para o modelo especificado em
# config$escolhe_modelo. Se o modelo não for especificado, ele
# faz a predição para o primeiro ajustado
if (is.null(config$escolhe_modelo)) {
config$escolhe_modelo <- 'fit1'
}
if (!file.exists(glue('saidas/{config$escolhe_modelo}.rds'))) {
stop("O modelo especificado não foi encontrado.")
}
if (!file.exists('entradas/preditores.json')) {
stop("Arquivo de preditores não encontrado.")
}
fit <- readRDS(glue('saidas/{config$escolhe_modelo}.rds'))  # lendo modelo
preditores <- fromJSON('entradas/preditores.json')          # lendo json
predicao_val <- predict(fit, newdata = preditores, type='response')
write(toJSON(predicao_val), file = glue('saidas/{config$escolhe_modelo}_predicao.json'))
message("Predições geradas e salvas com sucesso em: ", glue('saidas/{config$escolhe_modelo}_predicao.json'))
db <- read.csv(glue('entradas/{config$tabela}'), stringsAsFactors = T)  # lendo banco de dados
db
if (is.null(config$escolhe_modelo)) {
config$escolhe_modelo <- 'fit1'
}
fit <- readRDS(glue('saidas/{config$escolhe_modelo}.rds'))  # lendo modelo
fit
fit1 <- readRDS("C:/Users/luizf/AppData/Local/Temp/14378058-5071-4ce3-8bbe-2f703248e050_Trabalho 1 - ME918.zip.050/Trabalho 1 - ME918/saidas/fit1.rds")
fit1
predicao_val
db <- read.csv(glue('entradas/{config$tabela}'), stringsAsFactors = T)  # lendo banco de dados
if (is.null(config$escolhe_modelo)) {
config$escolhe_modelo <- 'fit1'
}
fit <- readRDS(glue('saidas/{config$escolhe_modelo}.rds'))  # lendo modelo
if (config$modelo == 'reg_linear') {
# Para regressão linear
plot(x = fit$fitted.values, y = db[[config$pares[[1]]$y]],
xlab = 'Valores Preditos', ylab = 'Valores Observados', main = 'Gráfico de Regressão Linear')
abline(v=predicao_val, lty = 8, col = rgb(0, 0, 0, alpha = 0.5))  # adiciona as linhas verticais
} else if (config$modelo == 'reg_logistica') {
# Para regressão logística
plot(x = fit$fitted.values, y = db[[config$pares[[1]]$y]],
xlab = 'Valores Preditos (Probabilidades)', ylab = 'Valores Observados', main = 'Gráfico de Regressão Logística')
abline(v=predicao_val, lty = 8, col = rgb(0, 0, 0, alpha = 0.5))  # adiciona as linhas verticais
}
# Salvando o gráfico em PDF
pdf('saidas/grafico_predicao.pdf', width = 7, height = 5)
if (config$modelo == 'reg_linear') {
plot(x = fit$fitted.values, y = db[[config$pares[[1]]$y]],
xlab = 'Valores Preditos', ylab = 'Valores Observados', main = 'Gráfico de Regressão Linear')
abline(v=predicao_val, lty = 8, col = rgb(0, 0, 0, alpha = 0.5))
} else if (config$modelo == 'reg_logistica') {
plot(x = fit$fitted.values, y = db[[config$pares[[1]]$y]],
xlab = 'Valores Preditos (Probabilidades)', ylab = 'Valores Observados', main = 'Gráfico de Regressão Logística')
abline(v=predicao_val, lty = 8, col = rgb(0, 0, 0, alpha = 0.5))
}
dev.off()
# pacotes utilizados
library(glue)
require(yaml)
require(jsonlite)
require(nnet)
# lendo configuracoes
config <- read_yaml('configuracao.yaml')  # lendo configuracoes
# verificações
if (!(config$reutilizar_modelo %in% c('sim', 'nao', 'não'))) {
stop('Especificacoes incorretas em reutilizar_modelo.')
}
# executando
if (config$reutilizar_modelo %in% c('não', 'nao')) source('treinamento.R')
source('predicao.R')
source('grafico.R')
# pacotes utilizados
library(glue)
require(yaml)
require(jsonlite)
require(nnet)
# lendo configuracoes
config <- read_yaml('configuracao.yaml')  # lendo configuracoes
# verificações
if (!(config$reutilizar_modelo %in% c('sim', 'nao', 'não'))) {
stop('Especificacoes incorretas em reutilizar_modelo.')
}
# executando
if (config$reutilizar_modelo %in% c('não', 'nao')) source('treinamento.R')
source('predicao.R')
# pacotes utilizados
library(glue)
require(yaml)
require(jsonlite)
require(nnet)
# lendo configuracoes
config <- read_yaml('configuracao.yaml')  # lendo configuracoes
# verificações
if (!(config$reutilizar_modelo %in% c('sim', 'nao', 'não'))) {
stop('Especificacoes incorretas em reutilizar_modelo.')
}
# executando
if (config$reutilizar_modelo %in% c('não', 'nao')) source('treinamento.R')
source('predicao.R')
# pacotes utilizados
library(glue)
require(yaml)
require(jsonlite)
require(nnet)
# lendo configuracoes
config <- read_yaml('configuracao.yaml')  # lendo configuracoes
# verificações
if (!(config$reutilizar_modelo %in% c('sim', 'nao', 'não'))) {
stop('Especificacoes incorretas em reutilizar_modelo.')
}
# executando
if (config$reutilizar_modelo %in% c('não', 'nao')) source('treinamento.R')
source('predicao.R')
source('grafico.R')
# pacotes utilizados
library(glue)
require(yaml)
require(jsonlite)
require(nnet)
# lendo configuracoes
config <- read_yaml('configuracao.yaml')  # lendo configuracoes
# verificações
if (!(config$reutilizar_modelo %in% c('sim', 'nao', 'não'))) {
stop('Especificacoes incorretas em reutilizar_modelo.')
}
# executando
if (config$reutilizar_modelo %in% c('não', 'nao')) source('treinamento.R')
source('predicao.R')
source('grafico.R')
if (config$modelo == 'reg_linear' || config$modelo == 'reg_logistica') {
# Geração do gráfico com valores preditos (x) vs observados (y)
plot(x = fit$fitted.values, y = db[[config$pares[[1]]$y]],
xlab = 'Valores Preditos', ylab = 'Valores Observados',
main = 'Gráfico de Regressão', pch = 19, col = 'blue')
# Adicionando as linhas verticais nos valores preditos do arquivo .json
abline(v = predicao_val, lty = 8, col = rgb(1, 0, 0, alpha = 0.5))  # Linhas vermelhas e pontilhadas
# Adiciona uma linha que conecta os valores ajustados
sorted_idx <- order(fit$fitted.values)  # Ordena os valores preditos para desenhar a linha corretamente
lines(fit$fitted.values[sorted_idx], db[[config$pares[[1]]$y]][sorted_idx], col = "blue", lwd = 2)
}
dev.off()
pdf('saidas/grafico_predicao.pdf', width = 7, height = 5)
if (config$modelo == 'reg_linear' || config$modelo == 'reg_logistica') {
# Geração do gráfico com valores preditos (x) vs observados (y)
plot(x = fit$fitted.values, y = db[[config$pares[[1]]$y]],
xlab = 'Valores Preditos', ylab = 'Valores Observados',
main = 'Gráfico de Regressão', pch = 19, col = 'blue')
# Adicionando as linhas verticais nos valores preditos do arquivo .json
abline(v = predicao_val, lty = 8, col = rgb(1, 0, 0, alpha = 0.5))  # Linhas vermelhas e pontilhadas
# Adiciona uma linha que conecta os valores ajustados
sorted_idx <- order(fit$fitted.values)  # Ordena os valores preditos para desenhar a linha corretamente
lines(fit$fitted.values[sorted_idx], db[[config$pares[[1]]$y]][sorted_idx], col = "blue", lwd = 2)
}
dev.off()
# pacotes utilizados
library(glue)
require(yaml)
require(jsonlite)
require(nnet)
# lendo configuracoes
config <- read_yaml('configuracao.yaml')  # lendo configuracoes
# verificações
if (!(config$reutilizar_modelo %in% c('sim', 'nao', 'não'))) {
stop('Especificacoes incorretas em reutilizar_modelo.')
}
# executando
if (config$reutilizar_modelo %in% c('não', 'nao')) source('treinamento.R')
source('predicao.R')
source('grafico.R')
# pacotes utilizados
library(glue)
require(yaml)
require(jsonlite)
require(nnet)
# lendo configuracoes
config <- read_yaml('configuracao.yaml')  # lendo configuracoes
# verificações
if (!(config$reutilizar_modelo %in% c('sim', 'nao', 'não'))) {
stop('Especificacoes incorretas em reutilizar_modelo.')
}
# executando
if (config$reutilizar_modelo %in% c('não', 'nao')) source('treinamento.R')
source('predicao.R')
source('grafico.R')
db <- read.csv(glue('entradas/{config$tabela}'), stringsAsFactors = T)  # lendo banco de dados
if (is.null(config$escolhe_modelo)) {
config$escolhe_modelo <- 'fit1'
}
fit <- readRDS(glue('saidas/{config$escolhe_modelo}.rds'))  # lendo modelo
if (config$modelo == 'reg_linear' || config$modelo == 'reg_logistica') {
# Geração do gráfico com valores preditos (x) vs observados (y)
plot(x = fit$fitted.values, y = db[[config$pares[[1]]$y]],
xlab = 'Valores Preditos', ylab = 'Valores Observados',
main = 'Gráfico de Regressão', pch = 19, col = 'blue')
# Adicionando as linhas verticais nos valores preditos do arquivo .json
abline(v = predicao_val, lty = 8, col = rgb(1, 0, 0, alpha = 0.5))  # Linhas vermelhas e pontilhadas
# Adiciona uma linha que conecta os valores ajustados
sorted_idx <- order(fit$fitted.values)  # Ordena os valores preditos para desenhar a linha corretamente
lines(fit$fitted.values[sorted_idx], db[[config$pares[[1]]$y]][sorted_idx], col = "blue", lwd = 2)
}
dev.off()
#pdf('saidas/grafico_predicao.pdf', width = 7, height = 5)
message("Gráfico gerado e salvo na pasta 'saidas'.")
plot(x = fit$fitted.values, y = db[[config$pares[[1]]$y]],
xlab = 'Valores Preditos', ylab = 'Valores Observados',
main = 'Gráfico de Regressão', pch = 19, col = 'blue')
# Adicionando as linhas verticais nos valores preditos do arquivo .json
abline(v = predicao_val, lty = 8, col = rgb(1, 0, 0, alpha = 0.5))  # Linhas vermelhas e pontilhadas
# Adicionar linha suave de predição
lines(new_data$wt, predicted_vals, col = "red", lwd = 2)  # Linha de predição vermelha
if (config$modelo == 'reg_linear') {
# Para regressão linear
plot(x = fit$fitted.values, y = db[[config$pares[[1]]$y]],
xlab = 'Valores Preditos', ylab = 'Valores Observados', main = 'Gráfico de Regressão Linear')
abline(v=predicao_val, lty = 8, col = rgb(0, 0, 0, alpha = 0.5))  # adiciona as linhas verticais
} else if (config$modelo == 'reg_logistica') {
# Para regressão logística
plot(x = fit$fitted.values, y = db[[config$pares[[1]]$y]],
xlab = 'Valores Preditos (Probabilidades)', ylab = 'Valores Observados', main = 'Gráfico de Regressão Logística')
abline(v=predicao_val, lty = 8, col = rgb(0, 0, 0, alpha = 0.5))  # adiciona as linhas verticais
}
# pacotes utilizados
library(glue)
require(yaml)
require(jsonlite)
require(nnet)
# lendo configuracoes
config <- read_yaml('configuracao.yaml')  # lendo configuracoes
# verificações
if (!(config$reutilizar_modelo %in% c('sim', 'nao', 'não'))) {
stop('Especificacoes incorretas em reutilizar_modelo.')
}
# executando
if (config$reutilizar_modelo %in% c('não', 'nao')) source('treinamento.R')
source('predicao.R')
source('grafico.R')
require(usethis)
usethis::use_readme_rmd()
